D3
========================================================
author: Hector Corrada Bravo
date: CMSC498: Intro Data Science

Why Interactivity?
========================================================
incremental: true

_Reduce data dimension_: allow user to explore large datasets by quickly switching between dimensions

_Overview first, zoom and filter, details on demand_: Provide big picture, let the user explore details as they desire

_Linked views for high dimensions_: There is a limit to the number of aesthetic mappings in a single graphic, make multiple graphics but link data objects between them

Web-based interactive visualization
======================================

Take advantage of HTML document description and the [Document Object Model](http://www.w3.org/DOM/) interface to _bind_ data to page elements.

- Shiny: bind data to controls
- Data-driven Documents (d3.js): bind data to svg elements directly

Taxonomy of Interactions
=========================

**Data and View Specification**: Visualize, Filter, Sort, Derive
**View Manipulation**: Select, Navigate, Coordinate, Organize
**Process and Provenance**: Record, Annotate, Share, Guide

[Heer](http://courses.cs.washington.edu/courses/cse512/15sp/lectures/CSE512-Interaction.pdf)

General Data Viz Tool Taxonomy
===============================

**Chart Typologies**: Excel, Google Charts
**Visual Analysis Grammars**: ggplot2, VizQL
**???**
**Component Architectures**: Prefuse, Flare, VTK
**Graphics APIs**: Processing, OpenGL, Java2D

[Heer](http://courses.cs.washington.edu/courses/cse512/15sp/lectures/CSE512-Tools.pdf)

General Data Viz Tool Taxonomy
===============================

**Chart Typologies**: Excel, Google Charts
**Visual Analysis Grammars**: ggplot2, VizQL
**Visualization Grammars**: D3.js, Protovis
**Component Architectures**: Prefuse, Flare, VTK
**Graphics APIs**: Processing, OpenGL, Java2D

[Heer](http://courses.cs.washington.edu/courses/cse512/15sp/lectures/CSE512-Tools.pdf)

D3 Tutorial
==============

[https://uwdata.github.io/d3-tutorials/](https://uwdata.github.io/d3-tutorials/)

D3 Alternatives
=============

- If you want to use a toolkit of standard charts based on d3:
[NVD3](http://nvd3.org/)
- A simpler charting library: [polychart.js](http://nvd3.org/)
- An alternative declarative library: [Vega](https://trifacta.github.io/vega/)

D3 and R
==========

- We saw previously that D3 and access external data through `json`
- That's how we can pass data from R to the Javascript browser
- There are existing proposals to formalize this

D3 and R
========

- [rCharts](http://ramnathv.github.io/rCharts/): Most mature. Provides binding between R and a small set of javascript viz libraries.
- [ggvis](http://ggvis.rstudio.com/): Uses grammar of graphics like ggplot2, bindings to [Vega](https://trifacta.github.io/vega/) to define JS charts.
- [htmlwidgets](http://www.htmlwidgets.org/index.html) a formalization of how to bind R to JS libraries. 
- [Roll your own](https://github.com/jcheng5/shiny-js-examples) 

